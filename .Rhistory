labs(title = "Average Carbon Emission by Diet") +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 30, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none")  + # Remove legend
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Diet") +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 30, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none")  + # Remove legend
ylim(c(0, 3000))  # Set y-axis limits
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Diet") +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 30, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none")  + # Remove legend
ylim(c(0, 2200))  # Set y-axis limits
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Diet") +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 26, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none")  + # Remove legend
ylim(c(0, 2200))  # Set y-axis limits
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Diet") +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 26, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none")  + # Remove legend
ylim(c(0, 1800))  # Set y-axis limits
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Diet") +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 26, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none",  # Remove legend
axis.title.x = element_blank())  )  + # Remove x-axis label
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Diet", x = NULL , y= NULL) +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 26, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none",  # Remove legend
)  +
ylim(c(0, 1800))  # Set y-axis limits
mean_comparison
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Diet", x = NULL , y= NULL) +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 26, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none",  # Remove legend
)
#ylim(c(0, 1800))  # Set y-axis limits
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Dietary Preference", x = NULL , y= NULL) +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 26, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none",  # Remove legend
)
#ylim(c(0, 1800))  # Set y-axis limits
ggplot(subset(car.emi, Diet %in% c('omnivore', 'vegan')),
aes(Diet, CarbonEmission, fill = Diet)) +  # 'fill' aesthetic for color grouping
geom_bar(position = 'dodge', stat = 'summary', fun = 'mean', colour="seagreen") +
labs(title = "Average Carbon Emission by Dietary Preference", x = NULL , y= NULL) +  # Title
scale_fill_manual(values = c( "aquamarine2", "aquamarine3")) +
theme(
plot.title = element_text(size = 20, face = "bold"),  # Change title font size
axis.text = element_text(size = 15),
legend.position = "none",  # Remove legend
)
#ylim(c(0, 1800))  # Set y-axis limits
set.seed(123)
carbon <- read.csv("CarbonEmission.csv", header = T)
set.seed(123)
carbon <- read.csv("..\data\CarbonEmission.csv", header = T)
set.seed(123)
carbon <- read.csv("../data/CarbonEmission.csv", header = T)
set.seed(123)
carbon <- read.csv("../data/CarbonEmission.csv", header = T)
set.seed(123)
carbon <- read.csv("..\\data\\CarbonEmission.csv", header = T)
set.seed(123)
carbon <- read.csv("..\\data\\Carbon Emission.csv", header = T)
carbon$List.Recycling <- lapply(carbon$Recycling, function(x) as.list(as.numeric(unlist(strsplit(gsub("\\[|\\]", "", x), ", ")))))
lengths <- sapply(carbon$List.Recycling, length)
carbon$Total.Recycling <- lengths
carbon$Recycling
table(carbon$Recycling)
?gsub
?unlist
?sample
carbon[1,-3]
head(carbon)
carbon[1,[-3]]
carbon[1]
carbon[-3][1]
carbon[-3]
carbon[1,1]
carbon[2,1]
carbon[2,-3]
len(head(carbon))
length(head(carbon))
carbon[2,18]
as.list(carbon[2,18])
carbon[4,18]
gsub("'", "", carbon[4,18])
gsub('"', "", carbon[4,18])
gsub("\\[|\\]", "", carbon[4,18])
gsub('"', "", gsub("\\[|\\]", "", carbon[4,18]))
strsplit(gsub("\\[|\\]", "", carbon[4,18]), ", ")
strsplit(gsub("\\[|\\]", "", carbon[4,18]), ",")
unlist(strsplit(gsub("\\[|\\]", "", carbon[4,18]), ","))
strsplit(gsub("\\[|\\]", "", carbon[4,18]), ",")[1]
class(strsplit(gsub("\\[|\\]", "", carbon[4,18]), ",")[1])
gsub("'", "", strsplit(gsub("\\[|\\]", "", carbon[4,18]), ",")[1])
as.list(gsub("'", "", strsplit(gsub("\\[|\\]", "", carbon[4,18]), ",")[1]))
print(as.list(gsub("'", "", strsplit(gsub("\\[|\\]", "", carbon[4,18]), ",")[1])))
gsub("\\[|\\]", "", carbon[4,18])
strsplit(gsub("\\[|\\]", "", carbon[4,18])
carbon$List.Recycling <- lapply(carbon$Recycling, function(x) as.list(as.numeric(unlist(strsplit(gsub("\\[|\\]", "", x), ",")))))
strsplit(gsub("\\[|\\]", "", carbon[4,18]))
?strsplit
strsplit(gsub("\\[|\\]", "", carbon[4,18]),", ")
l2 = strsplit(gsub("\\[|\\]", "", carbon[4,18]),", ")
l2
class(l2)
length(l2)
set.seed(123)
carbon <- read.csv("..\\data\\Carbon Emission.csv", header = T)
carbon$List.Recycling <- lapply(carbon$Recycling, function(x) as.list(unlist(strsplit(gsub("\\[|\\]", "", x), ","))))
lengths <- sapply(carbon$List.Recycling, length)
carbon$Total.Recycling <- lengths
split <- sample(c(TRUE, FALSE), nrow(carbon), replace=TRUE, prob=c(0.7, 0.3))
train <- carbon[split, ]
test <- carbon[!split, ]
head(carbon)
table(carbon$Total.Recycling)
table(carbon$List.Recycling)
set.seed(123)
carbon <- read.csv("..\\data\\Carbon Emission.csv", header = T)
List.Recycling <- lapply(carbon$Recycling, function(x) as.list(unlist(strsplit(gsub("\\[|\\]", "", x), ",")))) # i delete the as.numeric function, it still works, I don't know why we had that function in the beginning
lengths <- sapply(carbon$List.Recycling, length)
carbon$Total.Recycling <- lengths
lengths
set.seed(123)
carbon <- read.csv("..\\data\\Carbon Emission.csv", header = T)
List.Recycling <- lapply(carbon$Recycling, function(x) as.list(unlist(strsplit(gsub("\\[|\\]", "", x), ",")))) # i delete the as.numeric function, it still works, I don't know why we had that function in the beginning
lengths <- sapply(List.Recycling, length)
carbon$Total.Recycling <- lengths
split <- sample(c(TRUE, FALSE), nrow(carbon), replace=TRUE, prob=c(0.7, 0.3))
train <- carbon[split, ]
test <- carbon[!split, ]
table(carbon$Total.Recycling)
set.seed(123)
carbon <- read.csv("..\\data\\Carbon Emission.csv", header = T)
List.Recycling <- lapply(carbon$Recycling, function(x) as.list(unlist(strsplit(gsub("\\[|\\]", "", x), ",")))) # i delete the as.numeric function, it still works, I don't know why we had that function in the beginning
lengths <- sapply(List.Recycling, length)
carbon$Total.Recycling <- lengths
split <- sample(c(TRUE, FALSE), nrow(carbon), replace=TRUE, prob=c(0.7, 0.3))
train <- carbon[split, ]
test <- carbon[!split, ]
str(car.emi)
car.emi$CarbonEmission.Level = ifelse(car.emi$CarbonEmission > mean(car.emi$CarbonEmission),'High','Low')
table(car.emi$CarbonEmission.Level)
table1 = xtabs( ~ CarbonEmission.Level + Diet,data = car.emi)
table1
chisq.test(table1)
xtabs(~ CarbonEmission.Level + Diet + Social.Activity, data=car.emi)
boxplot(subset(car.emi,Diet==c('ominivore','vegan'))$CarbonEmission ~ subset(car.emi,Diet==c('ominivore','vegan'))$Diet)
boxplot(CarbonEmission ~Diet,data =  subset(car.emi,Diet==c('ominivore','vegan')))
boxplot(CarbonEmission ~Diet,data =  subset(car.emi,Diet==c('ominivore','vegan')))
setwd("C:/Users/wudan/OneDrive - Langara College/DANA_4820_Jonathan/project")
boxplot(CarbonEmission ~Diet,data =  subset(car.emi, Diet %in% c('omnivore', 'vegan')))
Social.Activity = c('never',     'often', 'sometimes')
for (Social.Activity_level in Social.Activity){
print(Social.Activity_level)
t_i = xtabs(~ CarbonEmission.Level  + Diet, Social.Activity==Social.Activity_level, data=car.emi)
t_i_oddsratio = epitools::oddsratio(t_i, method = "wald", conf = 0.95, correct = FALSE)
print(t_i_oddsratio)
print('-----------------------')
}
head(carbon)
str(carbon)
fit_diet = glm( CarbonEmission ~ Diet, data = carbon, family = binomial)
fit_diet = glm( CarbonEmission ~ Diet, data = carbon, family = poisson)
summary(fit_diet)
lrtest(fit_diet)
lmtest::lrtest(fit_diet)
fit_diet = glm( CarbonEmission ~ Diet, data = carbon, family = poisson)
summary(fit_diet)
### goodness of fit
H0: model is adequate
fit_diet = glm( CarbonEmission ~ Diet, data = carbon, family = poisson)
summary(fit_diet)
### goodness of fit
#H0: model is adequate
#Ha: model is not adequate
D = deviance(fit_diet)
D
df = fit_diet$df.residual
df
pvalue = pchisq(D,df,lower.tail = FALSE)
pvalue
str(carbon)
table(Social.Activity)
table(carbon$Social.Activity)
t_i_oddsratio
"often"
$data
xtabs(~ CarbonEmission.Level  + Diet + Social.Activity, data=car.emi)
as.data.frame(xtabs(~ CarbonEmission.Level  + Diet + Social.Activity, data=car.emi))
as.data.frame.matrix(xtabs(~ CarbonEmission.Level  + Diet + Social.Activity, data=car.emi))
install.packages("tidyr")
library(tidyr)
# Step 1: Create a 3-way contingency table
contingency_table <- xtabs(~ CarbonEmission.Level + Diet + Social.Activity, data=car.emi)
# Step 2: Convert the table to a long-format data frame
long_df <- as.data.frame.table(contingency_table)
# Step 3: Reshape the long-format data frame to a wide format
wide_df <- pivot_wider(long_df, names_from = CarbonEmission.Level, values_from = Freq,
id_cols = c(Social.Activity, Diet))
wide_df
# Now `wide_df` is a data frame with `Social.Activity` and `Diet` as hierarchical indices
# and different `CarbonEmission.Level` categories as columns.
boxplot(CarbonEmission ~Diet,data =  car.emi)
boxplot(CarbonEmission ~Diet,data =  carbon)
boxplot(CarbonEmission ~Diet,data =  carbon)
library(ggplot2)
# Sample ggplot boxplot command
ggplot(data = carbon, aes(x = Diet, y = CarbonEmission, fill = Diet)) +
geom_boxplot() +
scale_fill_manual(values = c("omnivore" = "blue", "pescatarian" = "green", "vegan" = "red", "vegetarian" = "yellow")) +
labs(title = "Boxplot of Carbon Emission by Diet",
x = "Diet",
y = "Carbon Emission",
fill = "Diet Category") +
theme_minimal()
cloth.model = glm(How.Many.New.Clothes.Monthly ~ Monthly.Grocery.Bill ,data = car.emi,family = poisson(link = 'log'))
summary(cloth.model)
D = deviance(cloth.model)
D
df = cloth.model$df.residual
df
pchisq(D,df,lower.tail = FALSE)
cloth.model = glm(How.Many.New.Clothes.Monthly ~ Monthly.Grocery.Bill ,data = carbon,family = poisson(link = 'log'))
summary(cloth.model)
D = deviance(cloth.model)
D
df = cloth.model$df.residual
df
pchisq(D,df,lower.tail = FALSE)
library(mosaic)
resample(cloth.model, statistic = ~deviance(.), n = 1000)
library(mosaic)
deviance_test = resample(cloth.model, statistic = ~deviance(.), n = 1000)
plot(deviance_test)
library(mosaic)
?mosaic
mosaic::xpchisq(D,df,lower.tail = FALSE)
qchisq(0.95,9998,lower.tail = FALSE)
qchisq(0.95,9998)
library(mosaic)
mosaic::xpchisq(D,df,lower.tail = FALSE)
# Calculate the critical value at the 95th percentile for the given degrees of freedom
critical_value <- qchisq(0.95, df)
# Add the critical value point to the plot
# Note: y-coordinate is arbitrarily chosen for visualization, adjust it as necessary
points(critical_value, 0.01, col="red", pch=19)
# Add the critical value point to the plot
# Note: y-coordinate is arbitrarily chosen for visualization, adjust it as necessary
points(critical_value, 0.01, col="red", pch=19,add=True)
library(mosaic)
mosaic::xpchisq(D,df,lower.tail = FALSE)
# Calculate the critical value at the 95th percentile for the given degrees of freedom
critical_value <- qchisq(0.95, df)
# Add the critical value point to the plot
# Note: y-coordinate is arbitrarily chosen for visualization, adjust it as necessary
points(critical_value, 0.01, col="red", pch=19)
install.packages("ggformula")
install.packages("ggformula")
install.packages("ggformula")
set.seed(123)
carbon <- read.csv("..\\data\\Carbon Emission.csv", header = T)
List.Recycling <- lapply(carbon$Recycling, function(x) as.list(unlist(strsplit(gsub("\\[|\\]", "", x), ",")))) # i delete the as.numeric function, it still works, I don't know why we had that function in the beginning
lengths <- sapply(List.Recycling, length)
carbon$Total.Recycling <- lengths
split <- sample(c(TRUE, FALSE), nrow(carbon), replace=TRUE, prob=c(0.7, 0.3))
train <- carbon[split, ]
test <- carbon[!split, ]
library(tidyr)
# Step 1: Create a 3-way contingency table
contingency_table <- xtabs(~ CarbonEmission.Level + Diet + Social.Activity, data=car.emi)
# Step 2: Convert the table to a long-format data frame
long_df <- as.data.frame.table(contingency_table)
# Step 3: Reshape the long-format data frame to a wide format
wide_df <- pivot_wider(long_df, names_from = CarbonEmission.Level, values_from = Freq,
id_cols = c(Social.Activity, Diet))
wide_df
# Now `wide_df` is a data frame with `Social.Activity` and `Diet` as hierarchical indices
# and different `CarbonEmission.Level` categories as columns.
cloth.model = glm(How.Many.New.Clothes.Monthly ~ Monthly.Grocery.Bill ,data = carbon,family = poisson(link = 'log'))
summary(cloth.model)
D = deviance(cloth.model)
D
df = cloth.model$df.residual
df
pchisq(D,df,lower.tail = FALSE)
library(mosaic)
library(ggformula) # add point on mosaic plot
p = mosaic::xpchisq(D,df,lower.tail = FALSE)
critical_value <- qchisq(0.95, df)
p = p + layer(geom_point(aes(x = critical_value, y = 0), color = "red", size = 3))
library(mosaic)
library(ggformula) # add point on mosaic plot
mosaic::xpchisq(D,df,lower.tail = FALSE)
critical_value <- qchisq(0.95, df)
points(critical_value, 0.01, col="red", pch=19)
library(mosaic)
mosaic::xpchisq(D,df,lower.tail = FALSE)
critical_value <- qchisq(0.95, df)
points(critical_value, 0.01, col="red", pch=19)
?points
library(mosaic)
# Assume D and df are already defined from your model
D <- deviance(cloth.model)
df <- cloth.model$df.residual
# Plot the chi-squared distribution and indicate the observed deviance
xchisq(df = df)
library(mosaic)
# Assume D and df are already defined from your model
D <- deviance(cloth.model)
df <- cloth.model$df.residual
# Plot the chi-squared distribution and indicate the observed deviance
xpchisq(df = df)
library(mosaic)
# Assume D and df are already defined from your model
D <- deviance(cloth.model)
df <- cloth.model$df.residual
# Plot the chi-squared distribution and indicate the observed deviance
xpchisq(D,df = df)
abline(v = D, col = "blue") # This is your observed deviance
str(train)
str(train)
train$CarbonEmission.Level = ifelse(train$CarbonEmission > mean(train$CarbonEmission),'High','Low')
table(train$CarbonEmission.Level)
table1 = xtabs( ~ CarbonEmission.Level + Diet,data = train)
table1
chisq.test(table1)
xtabs(~ CarbonEmission.Level + Diet + Social.Activity, data=train)
boxplot(CarbonEmission ~Diet,data =  train)
library(ggplot2)
# Sample ggplot boxplot command
ggplot(data = train, aes(x = Diet, y = CarbonEmission, fill = Diet)) +
geom_boxplot() +
scale_fill_manual(values = c("omnivore" = "blue", "pescatarian" = "green", "vegan" = "red", "vegetarian" = "yellow")) +
labs(title = "Boxplot of Carbon Emission by Diet",
x = "Diet",
y = "Carbon Emission",
fill = "Diet Category") +
theme_minimal()
Social.Activity = c('never',     'often', 'sometimes')
for (Social.Activity_level in Social.Activity){
print(Social.Activity_level)
t_i = xtabs(~ CarbonEmission.Level  + Diet, Social.Activity==Social.Activity_level, data=train)
t_i_oddsratio = epitools::oddsratio(t_i, method = "wald", conf = 0.95, correct = FALSE)
print(t_i_oddsratio)
print('-----------------------')
}
library(tidyr)
# Step 1: Create a 3-way contingency table
contingency_table <- xtabs(~ CarbonEmission.Level + Diet + Social.Activity, data=train)
# Step 2: Convert the table to a long-format data frame
long_df <- as.data.frame.table(contingency_table)
# Step 3: Reshape the long-format data frame to a wide format
wide_df <- pivot_wider(long_df, names_from = CarbonEmission.Level, values_from = Freq,
id_cols = c(Social.Activity, Diet))
wide_df
# Now `wide_df` is a data frame with `Social.Activity` and `Diet` as hierarchical indices
# and different `CarbonEmission.Level` categories as columns.
cloth.model = glm(How.Many.New.Clothes.Monthly ~ Monthly.Grocery.Bill ,data = train,family = poisson(link = 'log'))
summary(cloth.model)
D = deviance(cloth.model)
D
df = cloth.model$df.residual
df
pchisq(D,df,lower.tail = FALSE)
library(mosaic)
mosaic::xpchisq(D,df,lower.tail = FALSE)
critical_value <- qchisq(0.95, df)
points(critical_value, 0.01, col="red", pch=19)
library(mosaic)
mosaic::xpchisq(D,df,lower.tail = FALSE)
critical_value <- qchisq(0.95, df)
#points(critical_value, 0.01, col="red", pch=19)
#text(critical_value, 0.02, labels = paste("Critical value:", round(critical_value, 2)), pos = 4, col="red")
plot(cloth.model)
# Sample ggplot boxplot command
ggplot(data = subset(train,Social.Activity == 'never'), aes(x = Diet, y = CarbonEmission, fill = Diet)) +
geom_boxplot() +
scale_fill_manual(values = c("omnivore" = "blue", "pescatarian" = "green", "vegan" = "red", "vegetarian" = "yellow")) +
labs(title = "Boxplot of Carbon Emission by Diet",
x = "Diet",
y = "Carbon Emission",
fill = "Diet Category") +
theme_minimal()
# Sample ggplot boxplot command
ggplot(data = subset(train,Social.Activity == 'never'), aes(x = Diet, y = CarbonEmission, fill = Diet)) +
geom_boxplot() +
scale_fill_manual(values = c("omnivore" = "blue", "pescatarian" = "green", "vegan" = "red", "vegetarian" = "yellow")) +
labs(title = "Boxplot of Carbon Emission by Diet for people never party",
x = "Diet",
y = "Carbon Emission",
fill = "Diet Category") +
theme_minimal()
ggplot(data = subset(train,Social.Activity == 'sometimes'), aes(x = Diet, y = CarbonEmission, fill = Diet)) +
geom_boxplot() +
scale_fill_manual(values = c("omnivore" = "blue", "pescatarian" = "green", "vegan" = "red", "vegetarian" = "yellow")) +
labs(title = "Boxplot of Carbon Emission by Diet for people sometimes party",
x = "Diet",
y = "Carbon Emission",
fill = "Diet Category") +
theme_minimal()
ggplot(data = subset(train,Social.Activity == 'often'), aes(x = Diet, y = CarbonEmission, fill = Diet)) +
geom_boxplot() +
scale_fill_manual(values = c("omnivore" = "blue", "pescatarian" = "green", "vegan" = "red", "vegetarian" = "yellow")) +
labs(title = "Boxplot of Carbon Emission by Diet for people often party",
x = "Diet",
y = "Carbon Emission",
fill = "Diet Category") +
theme_minimal()
social.energy.table = xtabs(~Social.Activity+Energy.efficiency,data = train)
social.energy.table
library(vcdExtra)
A=CMHtest(social.energy.table, rscores = c(0,1,2),cscores=c(0,1,2), types="cor")
A
#Sample correlation R
n=sum(social.energy.table)
n
M=sqrt(A$table[1])
M
R=M/sqrt(n)
R
#P-value for one-sided standard normal with M statistic
P_value=pnorm(M, lower.tail = FALSE)
P_value
library(vcdExtra)
A=CMHtest(social.energy.table, rscores = c(0,2,1),cscores=c(0,1,2), types="cor")
A
#Sample correlation R
n=sum(social.energy.table)
n
M=sqrt(A$table[1])
M
R=M/sqrt(n)
R
#P-value for one-sided standard normal with M statistic
P_value=pnorm(M, lower.tail = FALSE)
P_value
chisq.test(social.energy.table)
mosaic::xqchisq(chisq.test(social.energy.table))
mosaic::xpchisq(7.8064,4)
mosaic::xpchisq(7.8064,4)
ggplot(data = subset(train,Social.Activity == 'often'), aes(x = Diet, y = CarbonEmission, fill = Diet)) +
geom_boxplot() +
scale_fill_manual(values = c("omnivore" = "red", "pescatarian" = "blue", "vegan" = "green", "vegetarian" = "yellow")) +
labs(title = "Boxplot of Carbon Emission by Diet for people often party",
x = "Diet",
y = "Carbon Emission",
fill = "Diet Category") +
theme_minimal()
#Sample correlation R
n=sum(social.energy.table)
n
M=sqrt(A$table[1])
M
R=M/sqrt(n)
R
#P-value for one-sided standard normal with M statistic
P_value=pnorm(M, lower.tail = FALSE)
P_value
mosaic::xpnorm(0.633)
mosaic::xpnorm(0.633,lower.tail = FALSE)
